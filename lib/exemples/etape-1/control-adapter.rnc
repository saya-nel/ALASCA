# ------------------------------------------------------------------------------
# Copyright Jacques Malenfant, Universit√© Pierre et Marie Curie.
# Jacques.Malenfant@lip6.fr
# 
# This software is a computer program whose purpose is to provide an
# example for the course ALASCA, namely a home energy manager.
# 
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can use,
# modify and/ or redistribute the software under the terms of the
# CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
# URL "http://www.cecill.info".
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-C license and that you accept its terms.
# ------------------------------------------------------------------------------

default namespace = "http://www.sorbonne-universite.fr/alasca/control-adapter"

start = control-adapter

# Description of how to make a correspondance betwenn the required control
# interfaces of the home energy manager and the offered interface of an
# equipment. See the following component interfaces for more details:
#   fr.sorbonne_u.components.cyphy.hem.interfaces.StandardEquipmentControlCI
#   fr.sorbonne_u.components.cyphy.hem.interfaces.SuspensionEquipmentControlCI
#   fr.sorbonne_u.components.cyphy.hem.interfaces.PlanningEquipmentControlCI
#
control-adapter = element control-adapter {
  identification,    # identification of the equipment and its control interface
  consumption,       # predetermined energy consumption of the equipment
  operations         # descibing how to related operations in the required
                     # interface and the operations in the offered one
}

# Identification of the equipment and its control interface
identification =
  attribute uid { xsd:NMTOKEN }, # unique ide of the equipment (serial number)
  attribute offered { text }    # canonical name of the offered interface

# Predetermined energy consumption of the equipment (e.g., on the bench)
consumption = element consumption {
  attribute min { xsd:double }?,
  attribute nominal { xsd:double },
  attribute max { xsd:double }?
}

# Relate operations in the required interface to the corresponding operations
# in the offered one
operations =
  on,                         # switching the equipment on
  off,                        # switching the equipment off
  mode-control?,              # operations controlling the mode of the equipment
  (  (attribute type { "suspension" }, # equipment can be suspended to force its
                                       # energy consumption near 0
      suspension-control)              # operations controlling the suspension
  |  (attribute type { "planning" },   # equipment can be planned (e.g., delayed
                                       # programs of washing machines)
      planning-control)                # operations controlling the planning
  )

# Operations controlling the mode of the equipment (e.g., economy versus
# standard)
mode-control = element mode-control {
  attribute numberOfModes { xsd:unsignedByte }, # integer between 0 and 255
  upMode,              # forcing the equipment to the next more consuming mode
  downMode,            # forcing the equipment to the next less consuming mode
  setMode,             # set the current mode, take [1, numberOfModes]
  currentMode          # get the current mode, return [1, numberOfModes]
}

# Operations controlling the suspension (e.g., a boiler can be suspended for
# some time to make sure that it does not heat water and consume energy during
# that period)
suspension-control =
  suspended,           # is the equipment currently suspended, return boolean
  suspend,             # suspend the equipment
  resume,              # resume normal operation for the equipment
  emergency            # degree of emergency of a resumption [0, 1]; the higher
                       # is this degree, the more it should be allowed to
		       # resume (e.g., the water temperature of the boiler
		       # becomes too cold to be useful)

# Operations controlling the planning (e.g., a washing machine that can plan a
# program to start in 3 hours but which could be postponed if there is not
# enough energy to execute it)
planning-control =
  hasPlan,             # true if the equipment has a planned program
  startTime,           # start time of the planned program
  duration,            # expected duration of the planned program
  deadline,            # deadline for the end the planned program
  postpone,            # postpone the planned program, take a duration
  advance,             # advance the planned program, take a duration
  cancel               # cancel the program

# Standard operations
on          = element on  { required*, body } # switching the equipment on
off         = element off { required*, body } # switching the equipment off

# Mode control operations
upMode      = element upMode      { required*, body }
downMode    = element downMode    { required*, body }
setMode     = element setMode     { required*, parameter, body }
currentMode = element currentMode { required*, body }

# suspension control operations
suspended   = element suspended   { required*, body }
suspend     = element suspend     { required*, body }
resume      = element resume      { required*, body }
emergency   = element emergency   { required*, body }

# planning control operations
hasPlan     = element hasPlan     { required*, body }
startTime   = element startTime   { required*, body }
duration    = element duration    { required*, body }
deadline    = element deadline    { required*, body }
postpone    = element postpone    { required*, parameter, body }
advance     = element advance     { required*, parameter, body }
cancel      = element cancel      { required*, body }

# Canonical names of classes that are used in a piece of code and which
# path must be known to be able to compile that code
required = element required {
  text                 # canonical name of a class referenced in the code and
                       # that will be needed to compile that code
}

# A name (variable) used in a piece of code to refer to a parameter that
# is passed to an operation having that code to execute
parameter = element parameter {
  attribute name { xsd:NMTOKEN } # name used in the code to refer to the
                                 # parameter passed by the  controller when
				 # calling the operation
}

# Piece of code that must be executed when a required operation is called
# in order to execute the corresponding services appearing in the offered
# interface
body = element body {
  attribute equipmentRef { xsd:NMTOKEN },  # variable refering to the equipment
                                           # in the code
  text                                     # the code itself, a Java statement
}
